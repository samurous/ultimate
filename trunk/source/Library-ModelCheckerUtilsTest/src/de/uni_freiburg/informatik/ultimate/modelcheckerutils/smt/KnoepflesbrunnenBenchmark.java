/*
 * Copyright (C) 2017 Matthias Heizmann (heizmann@informatik.uni-freiburg.de)
 * Copyright (C) 2017 University of Freiburg
 *
 * This file is part of the ULTIMATE ModelCheckerUtilsTest Library.
 *
 * The ULTIMATE ModelCheckerUtilsTest Library is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published
 * by the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 *
 * The ULTIMATE ModelCheckerUtilsTest Library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with the ULTIMATE ModelCheckerUtilsTest Library. If not, see <http://www.gnu.org/licenses/>.
 *
 * Additional permission under GNU GPL version 3 section 7:
 * If you modify the ULTIMATE ModelCheckerUtilsTest Library, or any covered work, by linking
 * or combining it with Eclipse RCP (or a modified version of Eclipse RCP),
 * containing parts covered by the terms of the Eclipse Public License, the
 * licensors of the ULTIMATE ModelCheckerUtilsTest Library grant you additional permission
 * to convey the resulting work.
 */
package de.uni_freiburg.informatik.ultimate.modelcheckerutils.smt;

import java.io.FileNotFoundException;
import java.io.IOException;

import org.junit.After;
import org.junit.AfterClass;
import org.junit.Before;
import org.junit.BeforeClass;
import org.junit.Test;

import de.uni_freiburg.informatik.ultimate.core.model.services.ILogger;
import de.uni_freiburg.informatik.ultimate.core.model.services.ILogger.LogLevel;
import de.uni_freiburg.informatik.ultimate.lib.modelcheckerutils.smt.SmtSortUtils;
import de.uni_freiburg.informatik.ultimate.lib.modelcheckerutils.smt.managedscript.ManagedScript;
import de.uni_freiburg.informatik.ultimate.core.model.services.IUltimateServiceProvider;
import de.uni_freiburg.informatik.ultimate.logic.LoggingScript;
import de.uni_freiburg.informatik.ultimate.logic.Logics;
import de.uni_freiburg.informatik.ultimate.logic.Script;
import de.uni_freiburg.informatik.ultimate.logic.Sort;
import de.uni_freiburg.informatik.ultimate.test.mocks.UltimateMocks;

/**
 *
 * @author Matthias Heizmann (heizmann@informatik.uni-freiburg.de)
 *
 */
public class KnoepflesbrunnenBenchmark {

	/**
	 * Warning: each test will overwrite the SMT script of the preceding test.
	 */
	private static final boolean WRITE_SMT_SCRIPTS_TO_FILE = false;
	private static final boolean WRITE_BENCHMARK_RESULTS_TO_WORKING_DIRECTORY = false;
	private static final long TEST_TIMEOUT_MILLISECONDS = 60_000;
	private static final LogLevel LOG_LEVEL = LogLevel.INFO;
	private static final String SOLVER_COMMAND = "z3 SMTLIB2_COMPLIANT=true -t:1000 -memory:2024 -smt2 -in";

	private IUltimateServiceProvider mServices;
	private Script mScript;
	private ManagedScript mMgdScript;
	private ILogger mLogger;
	private static QuantifierEliminationTestCsvWriter mCsvWriter;

	@BeforeClass
	public static void beforeAllTests() {
		mCsvWriter = new QuantifierEliminationTestCsvWriter(KnoepflesbrunnenBenchmark.class.getSimpleName());
	}

	@AfterClass
	public static void afterAllTests() {
		if (WRITE_BENCHMARK_RESULTS_TO_WORKING_DIRECTORY) {
			try {
				mCsvWriter.writeCsv();
			} catch (final IOException e) {
				throw new AssertionError(e);
			}
		}
	}

	@Before
	public void setUp() throws FileNotFoundException {
		mServices = UltimateMocks.createUltimateServiceProviderMock(LOG_LEVEL);
		mServices.getProgressMonitorService().setDeadline(System.currentTimeMillis() + TEST_TIMEOUT_MILLISECONDS);
		mLogger = mServices.getLoggingService().getLogger("lol");

		final Script solverInstance = UltimateMocks.createSolver(SOLVER_COMMAND, LOG_LEVEL);
		if (WRITE_SMT_SCRIPTS_TO_FILE) {
			mScript = new LoggingScript(solverInstance, "QuantifierEliminationTest.smt2", true);
		} else {
			mScript = solverInstance;
		}

		mMgdScript = new ManagedScript(mServices, mScript);
		mScript.setLogic(Logics.ALL);
	}

	@After
	public void tearDown() {
		mScript.exit();
		mCsvWriter.reportTestFinished();
	}


	@Test
	public void LRA_2010MonniauxQE_mjollnir5_formula50() {
		final String formulaAsString = "(forall ((|v17:0| Real)) (forall ((|v16:1| Real)) (forall ((|v15:2| Real)) (forall ((|v14:3| Real)) (forall ((|v13:4| Real)) (forall ((|v12:5| Real)) (exists ((|v11:6| Real)) (exists ((|v10:7| Real)) (exists ((|v9:8| Real)) (exists ((|v8:9| Real)) (exists ((|v7:10| Real)) (exists ((|v6:11| Real)) (forall ((|v5:12| Real)) (forall ((|v4:13| Real)) (forall ((|v3:14| Real)) (forall ((|v2:15| Real)) (forall ((|v1:16| Real)) (forall ((|v0:17| Real)) (or (and (or (<= 8.0 (+ (* 6.0 |v3:14|) (* 16.0 |v16:1|) (* 8.0 |v14:3|))) (<= (+ (* 7.0 |v7:10|) 4.0) (+ (* 10.0 |v1:16|) |v2:15| (* 5.0 |v13:4|)))) (or (<= (+ (* 8.0 |v7:10|) (* 2.0 |v10:7|) 11.0) (+ (* 19.0 |v11:6|) (* 13.0 |v12:5|))) (<= (+ (* 14.0 |v15:2|) (* 16.0 |v14:3|) 7.0) (* 6.0 |v8:9|))) (or (and (<= (+ (* 12.0 |v5:12|) (* 13.0 |v0:17|) (* 15.0 |v14:3|) 12.0) (* 11.0 |v11:6|)) (<= (+ (* 14.0 |v5:12|) (* 15.0 |v16:1|)) (+ (* 15.0 |v4:13|) (* 7.0 |v11:6|) 8.0))) (and (<= (+ (* 11.0 |v5:12|) (* 12.0 |v3:14|) 5.0) (* 12.0 |v0:17|)) (<= 19.0 (+ (* 13.0 |v4:13|) (* 3.0 |v3:14|) (* 8.0 |v17:0|) (* 9.0 |v15:2|)))))) (<= (+ (* 5.0 |v1:16|) (* 11.0 |v16:1|) 20.0) (* 10.0 |v10:7|)) (and (or (and (<= (+ (* 4.0 |v0:17|) 9.0) (+ (* 7.0 |v8:9|) (* 8.0 |v14:3|))) (<= (+ (* 9.0 |v3:14|) (* 19.0 |v11:6|)) (+ (* 15.0 |v10:7|) (* 8.0 |v13:4|) 1.0)) (or (<= (+ (* 14.0 |v10:7|) 4.0) (+ (* 14.0 |v9:8|) (* 8.0 |v12:5|) (* 11.0 |v17:0|))) (<= (+ (* 9.0 |v7:10|) (* 13.0 |v15:2|) 17.0) (* 6.0 |v13:4|)))) (and (<= (+ (* 3.0 |v5:12|) (* 15.0 |v15:2|) (* 19.0 |v14:3|)) (+ (* 2.0 |v1:16|) 4.0)) (<= (+ (* 7.0 |v7:10|) (* 9.0 |v9:8|) (* 13.0 |v17:0|) (* 15.0 |v13:4|) 12.0) 0.0)) (<= 20.0 (+ (* 14.0 |v3:14|) (* 3.0 |v10:7|) (* 16.0 |v11:6|) (* 9.0 |v14:3|))) (and (<= (* 18.0 |v2:15|) (+ (* 19.0 |v3:14|) (* 11.0 |v12:5|) 1.0)) (<= (+ (* 2.0 |v4:13|) (* 18.0 |v1:16|)) (+ (* 6.0 |v3:14|) |v14:3| 3.0)) (<= (+ (* 12.0 |v3:14|) (* 4.0 |v15:2|)) (+ (* 7.0 |v8:9|) (* 8.0 |v9:8|) 10.0))) (<= (+ (* 11.0 |v13:4|) (* 6.0 |v10:7|) 19.0) (+ (* 13.0 |v7:10|) (* 3.0 |v1:16|))) (<= (+ (* 13.0 |v14:3|) (* 19.0 |v11:6|) 17.0) (* 36.0 |v12:5|))) (or (and (or (<= (+ (* 3.0 |v3:14|) (* 18.0 |v11:6|)) (+ (* 11.0 |v13:4|) (* 3.0 |v12:5|) 11.0)) (<= (+ (* 16.0 |v6:11|) 2.0) (+ (* 19.0 |v4:13|) (* 9.0 |v3:14|)))) (<= (+ (* 17.0 |v11:6|) (* 6.0 |v17:0|)) 0.0)) (and (<= (+ (* 13.0 |v2:15|) (* 10.0 |v11:6|)) (+ (* 14.0 |v4:13|) (* 20.0 |v5:12|) 18.0)) (<= 0.0 (+ (* 8.0 |v0:17|) (* 17.0 |v10:7|) (* 14.0 |v17:0|) (* 20.0 |v14:3|) 15.0))) (<= (* 2.0 |v5:12|) (+ (* 12.0 |v13:4|) (* 16.0 |v8:9|) (* 12.0 |v14:3|) 17.0)) (<= (* 5.0 |v10:7|) (+ (* 19.0 |v7:10|) (* 3.0 |v17:0|) 16.0))) (or (and (<= (+ (* 20.0 |v7:10|) 4.0) (+ (* 9.0 |v2:15|) (* 8.0 |v11:6|))) (<= (+ (* 5.0 |v7:10|) (* 19.0 |v8:9|) (* 11.0 |v10:7|) (* 14.0 |v12:5|)) 9.0)) (and (<= (+ (* 16.0 |v4:13|) (* 5.0 |v3:14|)) (+ (* 5.0 |v0:17|) (* 4.0 |v15:2|) 11.0)) (or (<= (+ (* 2.0 |v7:10|) (* 15.0 |v1:16|) (* 8.0 |v11:6|) 9.0) 0.0) (<= (+ (* 11.0 |v4:13|) (* 19.0 |v2:15|)) (+ (* 2.0 |v3:14|) 1.0))) (<= (+ (* 14.0 |v13:4|) |v11:6| 5.0) (+ (* 5.0 |v0:17|) (* 13.0 |v3:14|)))) (and (<= (+ (* 3.0 |v1:16|) (* 2.0 |v0:17|)) (+ (* 10.0 |v2:15|) (* 6.0 |v3:14|) 13.0)) (<= (+ (* 8.0 |v14:3|) (* 17.0 |v11:6|)) (+ (* 18.0 |v0:17|) 10.0))))) (and (or (<= (+ (* 19.0 |v5:12|) (* 6.0 |v8:9|) 11.0) (+ (* 16.0 |v6:11|) (* 20.0 |v9:8|))) (and (<= (+ (* 15.0 |v4:13|) (* 15.0 |v15:2|) (* 17.0 |v8:9|)) (+ (* 12.0 |v5:12|) 6.0)) (<= (+ (* 11.0 |v13:4|) (* 2.0 |v9:8|) (* 8.0 |v14:3|)) 6.0) (or (<= (* 9.0 |v4:13|) (+ (* 18.0 |v7:10|) |v1:16| (* 7.0 |v0:17|) 11.0)) (<= (* 8.0 |v16:1|) (+ (* 10.0 |v2:15|) (* 10.0 |v13:4|))))) (<= (* 9.0 |v4:13|) (+ (* 17.0 |v8:9|) (* 12.0 |v15:2|) 15.0)) (<= (+ (* 6.0 |v6:11|) (* 5.0 |v13:4|) 13.0) (+ (* 5.0 |v0:17|) (* 4.0 |v3:14|)))) (or (and (or (<= (+ (* 15.0 |v4:13|) |v2:15|) (+ (* 14.0 |v5:12|) (* 7.0 |v15:2|) 10.0)) (<= (+ (* 18.0 |v7:10|) (* 11.0 |v12:5|) (* 15.0 |v10:7|) 1.0) (* 13.0 |v17:0|))) (or (<= 3.0 (+ (* 11.0 |v4:13|) (* 5.0 |v3:14|) (* 6.0 |v14:3|) (* 15.0 |v9:8|))) (<= (+ (* 13.0 |v9:8|) 15.0) (* 25.0 |v7:10|)))) (<= 0.0 (+ (* 18.0 |v7:10|) (* 13.0 |v13:4|) (* 13.0 |v15:2|) 2.0)))))))))))))))))))))))";
		final String expectedResultAsString = "false";
		QuantifierEliminationTest.runQuantifierEliminationTest(formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}

	@Test
	public void LRA_schollsmt08_model_model_5_62() {
		final Sort bool = SmtSortUtils.getBoolSort(mScript);
		final Sort real = SmtSortUtils.getRealSort(mScript);
		mScript.declareFun("x3", new Sort[0], real);
		mScript.declareFun("x4", new Sort[0], real);
		mScript.declareFun("bool.b17", new Sort[0], bool);
		mScript.declareFun("bool.b18", new Sort[0], bool);
		mScript.declareFun("bool.b19", new Sort[0], bool);
		mScript.declareFun("bool.b20", new Sort[0], bool);
		mScript.declareFun("bool.b21", new Sort[0], bool);
		mScript.declareFun("bool.b22", new Sort[0], bool);
		mScript.declareFun("bool.b23", new Sort[0], bool);
		mScript.declareFun("bool.b24", new Sort[0], bool);
		final String formulaAsString = "(forall ((?lambda Real)) (or (< ?lambda 0.0) (and (not (and (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not bool.b18) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) bool.b17 (not (<= (+ x3 209.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4)))) (not bool.b19))) (not (and (not (and (not (and (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (not bool.b23) (not bool.b20) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (not bool.b21) (not bool.b22) (not bool.b17) (not (and (not (and (not bool.b18) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (not bool.b17) (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))) bool.b19)) (not (and (not (and (not (and (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (not (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (not (and (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))) (not (and (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (and (not (and (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))) (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4)))))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) (not (and (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0)) (not (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4)))))) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))))) (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))))))))))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))))) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) bool.b18 (not (and bool.b18 bool.b19)))))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) (not (and (not (and (not bool.b23) (not bool.b20) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (not bool.b23) (not bool.b20) (not bool.b21) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)) (not bool.b22) (not bool.b17) bool.b18 (not (and bool.b18 bool.b19)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0) (not bool.b17) bool.b18 (not (and bool.b18 bool.b19)) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)))) (not (and (not bool.b18) (not bool.b17) (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))) bool.b19)))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))))) (not bool.b21) (not bool.b22))) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not (and (not (and (not (and (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)))))) (not (and (not (and (not bool.b18) (not bool.b19))) (not bool.b23) (not bool.b20) (not bool.b21) (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not bool.b22) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))) (not bool.b17))) (not (and (not bool.b18) (not bool.b17) (not (and (not (and (not bool.b18) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (not bool.b17) (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))) bool.b19)) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))))) (not (and (not (and (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))) bool.b18)))) (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)))))) (not (and (not (and (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (not bool.b17) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)) bool.b18 (not (and bool.b18 bool.b19)))) (not (and (not bool.b18) bool.b19)))))))) (not bool.b17) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (not (and (not (and (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))) (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4)))))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) (not (and (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (not (and (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0)) (not (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4)))))) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))))) (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))))))) (not (and (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (not bool.b17) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (not (and (not (and (not bool.b23) (not bool.b20) (not (and (not (and (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))))) (not bool.b21) (not bool.b22) (not bool.b17) bool.b18 (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (not bool.b23) (not bool.b20) (not bool.b21) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)) (not bool.b22) (not bool.b17) bool.b18 (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))) (<= 4910.0 (+ (* 20.0 ?lambda) x4)))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 6.0) ?lambda) x3 59.0) (* (/ 1.0 60.0) x4))) (not bool.b23) (not bool.b20) (not bool.b21) (<= (+ (* (/ 1.0 6.0) ?lambda) x3 55.0) (* (/ 1.0 60.0) x4)) (not bool.b22) (not bool.b17) bool.b18 (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))))) (not bool.b17))))))) (not (and (not (and (not (and bool.b17 (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not bool.b18) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) bool.b17 (not (<= (+ x3 209.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4)))) (not bool.b19))) (not (and (not (and (not (and (not (and (not (and (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (and (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) bool.b24 (not (and (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))))))) (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (not (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0)) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))) (not bool.b24))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and bool.b24 (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not (and (not (and bool.b24 (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) bool.b24 (not (and (not (and (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0))))) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (and (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))))) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (and bool.b24 (not (and (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))))))) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))) (not (and (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (and (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) bool.b24 (not (and (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))))))) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)) (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)))) (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0) (<= (+ x3 205.0) (+ (* (/ 1.0 2.0) ?lambda) (* (/ 1.0 20.0) x4))) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)))) (not bool.b24))))))) (not bool.b18) (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not bool.b19) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (not bool.b18))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))))) bool.b17)) (not (and (not (and (not (and (not bool.b23) (not bool.b20) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (not bool.b21) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not bool.b20) (not (and (not bool.b18) (not bool.b17) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) bool.b19)) (not (and bool.b18 (not (and bool.b18 bool.b19)) (not (and (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ x3 (/ 193.0 2.0)) (* (/ 1.0 40.0) x4))) (<= (+ x3 (/ 185.0 2.0)) (* (/ 1.0 40.0) x4)))) (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)))))))))) (not bool.b22) (not (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)))) (not bool.b17))) (not (and (not (and (not (and (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (not bool.b23) (not bool.b20) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (not bool.b21) (not bool.b22) (not (and (not bool.b20) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (not (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)))) (not (and (not (and (not bool.b18) (not bool.b17) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) bool.b19)) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) bool.b18 (not (and bool.b18 bool.b19)) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))))) (not bool.b17))) (not (and (not (and (not bool.b18) (not bool.b19))) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))))) (not bool.b17) (not (and (not (and (not (and (not (and (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (and (not bool.b18) (not bool.b19))) (not bool.b23) (not bool.b20) (not bool.b21) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0)) (not bool.b22) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (and (not (and (not bool.b20) (not (and (not (and (not bool.b18) (not bool.b19))) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))) (not (and (not (and (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))))) (not (and (not bool.b20) (not (and (not (and (not bool.b18) (not bool.b19))) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)))))) (not (and (not (and (not bool.b23) (not bool.b20) (not bool.b21) (not bool.b22))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))))) (not bool.b17))))) (not (and (not (and (not bool.b23) (not bool.b20) (not bool.b21) (not (and (not (and (not (and (not (and (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (and (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))))) (<= 4910.0 (+ (* 20.0 ?lambda) x4)))) (not (and (not (<= 4500.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ x3 (/ 193.0 2.0)) (* (/ 1.0 40.0) x4))) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) (<= (+ x3 (/ 185.0 2.0)) (* (/ 1.0 40.0) x4)))) (not (and (not (and (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (not (and (not (and (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (and (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 359.0) (not (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0))))))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (not (<= (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4)) 241.0)) (<= (+ ?lambda x3 (* (/ 1.0 40.0) x4)) 133.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (<= (+ (* (/ 11.0 6.0) ?lambda) x3 (* (/ 1.0 15.0) x4)) (/ 964.0 3.0)))))) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (not (and (not (and (not bool.b23) (not bool.b20) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0)) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (and (not bool.b18) (not bool.b19))) (not bool.b21) (not bool.b22) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not bool.b17) (not (and bool.b18 bool.b19)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0)) (not (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0))))) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0)))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) (/ 743.0 2.0)))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 723.0)))) (<= (+ (* 2.0 ?lambda) x3 (* (/ 3.0 40.0) x4)) 610.0))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))))) (<= 4500.0 (+ (* 20.0 ?lambda) x4)))))) bool.b18 (not (and bool.b18 bool.b19)))) (not (and (<= (/ 581.0 2.0) (+ (* (/ 3.0 2.0) ?lambda) x3 (* (/ 1.0 20.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not bool.b20) (not (and (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 45.0) (<= (/ 731.0 6.0) (+ (* (/ 5.0 6.0) ?lambda) x3 (* (/ 1.0 60.0) x4))) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))))) (not (and (<= (+ (* (/ 7.0 2.0) ?lambda) x3 (* (/ 3.0 20.0) x4)) 1200.0) (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 40.0) (<= 4500.0 (+ (* 20.0 ?lambda) x4)) (not (<= 4910.0 (+ (* 20.0 ?lambda) x4))) (<= (/ 623.0 4.0) (+ ?lambda x3 (* (/ 1.0 40.0) x4))))))) (not bool.b22) (not bool.b17))) (not (<= (+ (* (/ 1.0 2.0) ?lambda) x3) 0.0))))))) (exists ((?lambdaprime Real)) (and (not (and (not (and bool.b17 (not (and (not (<= 20.0 (+ (* (/ 1.0 2.0) ?lambdaprime) x3))) (not (<= 4100.0 (+ (* 20.0 ?lambdaprime) x4))))))) (not (and (not (and (not (<= 20.0 (+ (* (/ 1.0 2.0) ?lambdaprime) x3))) (not (<= 4910.0 (+ (* 20.0 ?lambdaprime) x4))))) bool.b19)) (not (and (not (and (not (<= 20.0 (+ (* (/ 1.0 2.0) ?lambdaprime) x3))) (not (<= 4500.0 (+ (* 20.0 ?lambdaprime) x4))))) bool.b18)))) (<= 0.0 ?lambdaprime) (<= ?lambdaprime ?lambda)))))";
		final String expectedResultAsString = "(let ((.cse20 (* (/ 1.0 140.0) x4)) (.cse18 (* (/ 12.0 7.0) x3)) (.cse19 (* (/ 2.0 7.0) x3)) (.cse17 (* (/ 3.0 70.0) x4)) (.cse7 (* 2.0 x3)) (.cse23 (* (/ 1.0 40.0) x4)) (.cse8 (* (/ 1.0 20.0) x4))) (let ((.cse6 (<= 205.0 .cse8)) (.cse16 (<= (/ 623.0 4.0) (+ x3 .cse23))) (.cse14 (< .cse8 (+ .cse7 (/ 491.0 2.0)))) (.cse15 (< (/ 2400.0 7.0) (+ .cse19 .cse17))) (.cse10 (<= (/ 731.0 5.0) (+ (* (/ 6.0 5.0) x3) (* (/ 1.0 50.0) x4)))) (.cse11 (not bool.b18)) (.cse12 (not (<= (+ x3 (/ 185.0 2.0)) .cse23))) (.cse13 (<= (+ x3 (/ 193.0 2.0)) .cse23)) (.cse2 (<= .cse17 (+ .cse18 (/ 1166.0 7.0)))) (.cse3 (<= 40.0 .cse7)) (.cse21 (<= 225.0 .cse8)) (.cse22 (<= (+ .cse19 (/ 129.0 7.0)) .cse20)) (.cse0 (<= .cse17 (+ .cse18 (/ 1446.0 7.0)))) (.cse9 (not bool.b20)) (.cse1 (<= (+ .cse19 (/ 545.0 14.0)) .cse20)) (.cse4 (<= (/ 491.0 2.0) .cse8)) (.cse5 (< 0.0 .cse7))) (and (or .cse0 .cse1 .cse2 .cse3 bool.b18 .cse4 bool.b17 .cse5) (or .cse6 bool.b21 bool.b20 bool.b23 (<= (+ .cse7 418.0) (* (/ 1.0 10.0) x4)) bool.b22 (<= .cse8 (+ .cse7 205.0)) bool.b18 (not bool.b17) bool.b19) (or (<= (* (/ 4.0 175.0) x4) (+ (* (/ 32.0 35.0) x3) (/ 6883.0 35.0))) .cse9 .cse10 bool.b18 bool.b17 bool.b19) (or .cse6 .cse11 .cse12 bool.b21 bool.b20 bool.b23 bool.b22 bool.b17 .cse13 bool.b19) (or .cse14 .cse15 .cse9 .cse16 bool.b18 bool.b17 .cse5 bool.b19) (or .cse14 .cse0 .cse9 bool.b18 bool.b17 (<= .cse17 (+ .cse18 (/ 2400.0 7.0))) .cse5 bool.b19) (or .cse6 .cse0 (<= .cse19 (+ .cse20 (/ 11.0 7.0))) .cse2 .cse3 bool.b18 bool.b17 .cse5 bool.b19) (or .cse0 .cse1 .cse2 .cse3 .cse21 .cse22 .cse4 bool.b17 .cse5) (or .cse14 .cse15 .cse9 bool.b18 bool.b17 .cse5 bool.b19) (or .cse0 .cse15 .cse9 .cse16 bool.b18 bool.b17 .cse5 bool.b19) (or .cse0 bool.b18 bool.b17 .cse5 bool.b19) (or .cse14 .cse15 .cse9 .cse10 bool.b18 bool.b17 .cse5 bool.b19) (or .cse11 .cse12 bool.b21 bool.b20 bool.b23 bool.b22 .cse21 bool.b17 .cse13 bool.b19) (or .cse0 .cse9 .cse1 bool.b18 .cse4 bool.b17 .cse5 bool.b19) (or .cse11 .cse12 bool.b21 bool.b20 bool.b23 bool.b22 bool.b17 .cse5 .cse13 bool.b19) (or .cse0 .cse2 .cse3 .cse21 .cse22 bool.b17 .cse5 bool.b19) (or .cse0 .cse9 .cse1 bool.b18 .cse4 bool.b17 .cse5))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}



	@Test
	public void LIA_psyco_142() {
		final Sort bool = SmtSortUtils.getBoolSort(mScript);
		mScript.declareFun("W_S1_V4", new Sort[0], bool);
		mScript.declareFun("W_S1_V2", new Sort[0], bool);
		mScript.declareFun("W_S1_V1", new Sort[0], bool);
		mScript.declareFun("R_E1_V4", new Sort[0], bool);
		mScript.declareFun("R_E1_V2", new Sort[0], bool);
		mScript.declareFun("R_E1_V3", new Sort[0], bool);
		mScript.declareFun("R_S1_V1", new Sort[0], bool);
		mScript.declareFun("DISJ_W_S1_R_E1", new Sort[0], bool);
		mScript.declareFun("R_S1_V4", new Sort[0], bool);
		mScript.declareFun("R_S1_V2", new Sort[0], bool);
		mScript.declareFun("R_S1_V3", new Sort[0], bool);
		mScript.declareFun("DISJ_W_S1_R_S1", new Sort[0], bool);
		mScript.declareFun("W_S1_V3", new Sort[0], bool);
		mScript.declareFun("R_E1_V1", new Sort[0], bool);
		final String formulaAsString = "(and (not R_E1_V1) W_S1_V3 (= DISJ_W_S1_R_E1 (not (or (and W_S1_V2 R_E1_V2) (and W_S1_V4 R_E1_V4) R_E1_V3))) (forall ((V3_0 Int) (V2_0 Int) (V4_0 Int) (MW_S1_V1 Bool) (MW_S1_V3 Bool) (MW_S1_V2 Bool) (MW_S1_V4 Bool) (S1_V3_!152 Int) (S1_V3_!158 Int) (S1_V4_!154 Int) (S1_V4_!160 Int) (S1_V1_!151 Int) (S1_V1_!157 Int) (S1_V2_!153 Int) (S1_V2_!159 Int) (E1_!150 Int) (E1_!155 Int) (E1_!156 Int) (E1_!161 Int)) (or (not (and (not (<= V2_0 E1_!155)) (<= (+ E1_!156 1) V2_0) (not (<= (+ E1_!161 1) (ite MW_S1_V1 S1_V1_!157 (+ V2_0 (- 1))))) (not (<= V2_0 E1_!150)) (<= (ite MW_S1_V2 S1_V2_!153 V2_0) (+ (ite MW_S1_V1 S1_V1_!151 E1_!150) 1)))) (not (and (= E1_!150 E1_!155) (or (not (and (or (not R_E1_V4) (= V4_0 (ite MW_S1_V4 S1_V4_!160 V4_0))) (or (not R_E1_V3) (= V3_0 (ite MW_S1_V3 S1_V3_!158 V3_0))) (or (= (ite MW_S1_V2 S1_V2_!159 V2_0) V2_0) (not R_E1_V2)))) (= E1_!156 E1_!161)) (or (not (and (or (not R_E1_V4) (= V4_0 (ite MW_S1_V4 S1_V4_!160 V4_0))) (or (not R_E1_V3) (= V3_0 (ite MW_S1_V3 S1_V3_!158 V3_0))) (or (= (ite MW_S1_V2 S1_V2_!159 V2_0) V2_0) (not R_E1_V2)))) (= E1_!150 E1_!161)) (or (not MW_S1_V2) W_S1_V2) (or W_S1_V1 (not MW_S1_V1)) (= E1_!156 E1_!155) (= E1_!150 E1_!156) (or (not (or (not R_S1_V1) (= E1_!150 (+ V2_0 (- 1))))) (= S1_V3_!152 S1_V3_!158)) (or (not (or (not R_S1_V1) (= V2_0 (+ E1_!150 1)))) (= S1_V4_!154 S1_V4_!160)) (or (not (or (not R_S1_V1) (= E1_!150 (+ V2_0 (- 1))))) (= S1_V1_!151 S1_V1_!157)) (or (= S1_V2_!159 S1_V2_!153) (not (or (not R_S1_V1) (= V2_0 (+ E1_!150 1))))) (or (not (and (or (not R_E1_V4) (= V4_0 (ite MW_S1_V4 S1_V4_!160 V4_0))) (or (not R_E1_V3) (= V3_0 (ite MW_S1_V3 S1_V3_!158 V3_0))) (or (= (ite MW_S1_V2 S1_V2_!159 V2_0) V2_0) (not R_E1_V2)))) (= E1_!155 E1_!161)) (or W_S1_V4 (not MW_S1_V4)))) (and (= (ite MW_S1_V2 S1_V2_!153 V2_0) (ite MW_S1_V2 S1_V2_!159 V2_0)) (= (+ (ite MW_S1_V2 S1_V2_!159 V2_0) (- 1)) (ite MW_S1_V1 S1_V1_!151 E1_!150)) (= (ite MW_S1_V4 S1_V4_!154 V4_0) (ite MW_S1_V4 S1_V4_!160 V4_0)) (= (ite MW_S1_V3 S1_V3_!152 V3_0) (ite MW_S1_V3 S1_V3_!158 V3_0))))) (= DISJ_W_S1_R_S1 (not (or (and W_S1_V1 R_S1_V1) R_S1_V3 (and W_S1_V4 R_S1_V4) (and R_S1_V2 W_S1_V2)))))";
		final String expectedResultAsString = "(let ((.cse5 (not W_S1_V2)) (.cse20 (not W_S1_V1))) (let ((.cse12 (or .cse5 .cse20)) (.cse0 (not R_S1_V1))) (let ((.cse11 (or .cse0 .cse5 .cse20)) (.cse3 (and .cse5 .cse12)) (.cse34 (or .cse0 .cse5))) (let ((.cse13 (or .cse0 .cse20)) (.cse33 (and .cse0 .cse34)) (.cse31 (or .cse0 .cse3)) (.cse1 (not W_S1_V4)) (.cse37 (and .cse11 .cse34))) (let ((.cse7 (or .cse1 .cse37)) (.cse8 (or .cse0 .cse1 .cse37)) (.cse21 (and .cse31 .cse5 .cse12)) (.cse18 (or .cse0 .cse1 .cse5)) (.cse19 (or .cse0 .cse1 .cse5 .cse20)) (.cse10 (or .cse33 .cse1 .cse20)) (.cse36 (and .cse11 .cse13 .cse5 .cse12 .cse20)) (.cse28 (or (and .cse5 .cse34) .cse0)) (.cse32 (and .cse0 .cse5))) (let ((.cse16 (or .cse32 .cse20)) (.cse23 (and (or .cse0 (and .cse5 .cse20)) .cse5 .cse20)) (.cse26 (or .cse0 (and .cse5 .cse28))) (.cse27 (or .cse36 .cse0)) (.cse29 (or .cse0 (and .cse11 (or .cse0 .cse36) .cse13 .cse5 .cse12 .cse20))) (.cse24 (let ((.cse35 (or .cse0 .cse1 .cse20))) (and .cse18 (or .cse0 (and (or .cse0 (and .cse18 .cse10 .cse19 .cse35)) .cse18 .cse19 .cse10 .cse35)) (or .cse0 (and .cse18 .cse19 .cse10 .cse35)) .cse19 .cse10 .cse35))) (.cse14 (and .cse11 .cse5 .cse12 .cse34)) (.cse6 (not R_E1_V3)) (.cse9 (or .cse0 .cse33 .cse1 .cse20)) (.cse15 (or .cse32 .cse0 .cse20)) (.cse22 (and .cse31 .cse5 (or .cse0 .cse21) .cse12)) (.cse4 (not R_E1_V2)) (.cse25 (and (or .cse0 (and .cse8 .cse7)) .cse7 .cse8)) (.cse2 (not R_E1_V4))) (and (or .cse0 .cse1 .cse2 .cse3) (not R_E1_V1) (or (and (or .cse1 .cse2) (or .cse4 .cse5) DISJ_W_S1_R_E1 .cse6) (and (not DISJ_W_S1_R_E1) (or (and W_S1_V2 R_E1_V2) (and W_S1_V4 R_E1_V4) R_E1_V3))) (or .cse4 (and (or .cse0 (and .cse7 .cse8)) .cse7 .cse8)) (or .cse0 .cse3 .cse6) (or .cse0 (and .cse9 .cse10)) (or .cse0 (and .cse11 .cse12)) (or (and (or (and W_S1_V1 R_S1_V1) R_S1_V3 (and W_S1_V4 R_S1_V4) (and R_S1_V2 W_S1_V2)) (not DISJ_W_S1_R_S1)) (and DISJ_W_S1_R_S1 (or (not R_S1_V4) .cse1) .cse13 (or .cse5 (not R_S1_V2)) (not R_S1_V3))) .cse12 (or .cse0 .cse1 .cse14 .cse2) (or .cse0 (and .cse15 .cse16)) .cse11 (or .cse0 .cse4 .cse14) (or .cse4 (let ((.cse17 (or .cse0 .cse5 .cse1 .cse20))) (and (or .cse0 (and .cse17 .cse18 .cse19)) .cse17 .cse18 (or .cse0 (and (or .cse0 (and .cse18 .cse19)) .cse17 .cse18 .cse19)) .cse19))) W_S1_V3 .cse5 (or .cse0 .cse4 .cse21) (or .cse0 .cse4 .cse3) (or .cse22 .cse6) .cse16 (or .cse0 .cse21 .cse6) (or .cse0 .cse23 .cse6) (or .cse24 .cse6) (or .cse25 .cse6) (or .cse0 .cse1 .cse2 .cse21) (or .cse0 .cse23 .cse1 .cse2) (or (and .cse26 .cse27 .cse5 .cse28 .cse29 .cse20) .cse6) (or .cse4 (let ((.cse30 (or .cse0 (and .cse11 .cse5 .cse12)))) (and .cse26 .cse5 .cse28 .cse12 (or .cse0 (and .cse11 .cse5 .cse12 .cse30)) .cse30))) .cse10 (or (and (or .cse1 (and .cse26 .cse5 .cse28)) (or .cse1 (and .cse27 .cse5 .cse29 .cse20))) .cse2) (or .cse24 .cse2) (or .cse0 .cse14 .cse6) .cse9 (or .cse22 .cse1 .cse2) .cse15 (or .cse22 .cse4) (or .cse25 .cse2))))))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}


	/**
	 * 20190812 Matthias: In the competition we were able to solve this benchmark
	 * but now we obtain an AE term.
	 */
//	@Test
	public void BV_2017_Preiner_scholl_smt08_model_model_6_64() {
		final Sort bool = SmtSortUtils.getBoolSort(mScript);
		final Sort bv32 = SmtSortUtils.getBitvectorSort(mScript, 32);
		mScript.declareFun("bool.b22", new Sort[0], bool);
		mScript.declareFun("bool.b7", new Sort[0], bool);
		mScript.declareFun("bool.b5", new Sort[0], bool);
		mScript.declareFun("bool.b6", new Sort[0], bool);
		mScript.declareFun("bool.b23", new Sort[0], bool);
		mScript.declareFun("bool.b12", new Sort[0], bool);
		mScript.declareFun("bool.b8", new Sort[0], bool);
		mScript.declareFun("bool.b10", new Sort[0], bool);
		mScript.declareFun("bool.b14", new Sort[0], bool);
		mScript.declareFun("x3", new Sort[0], bv32);
		mScript.declareFun("x4", new Sort[0], bv32);
		mScript.declareFun("x5", new Sort[0], bv32);
		final String formulaAsString = "(forall ((?lambda (_ BitVec 32))) (or (not (and (not (and (not (and bool.b6 (not (and (not (and (not (and (not (and (not bool.b12) (not bool.b5) (not bool.b14) (not (bvsle x3 (_ bv723 32))) (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32)) (bvsle x3 (_ bv1200 32)) (not bool.b10) (not bool.b8) (bvsle x3 (_ bv40 32)))) (not (bvsle x3 (_ bv0 32))))) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (not (and (not (and (not bool.b5) (not (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32))))) (bvsle x3 (_ bv0 32)))))) bool.b23)) (not (and (not bool.b23) (not (and (not (and (bvsle x3 (_ bv15 32)) (not (and (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv1105 32)) (not (and (not (and (not (and (bvsle x3 (_ bv371 32)) (not (and (not bool.b12) (not bool.b5) (not bool.b14) (not (bvsle x3 (_ bv723 32))) (bvsle x3 (_ bv1200 32)) (not bool.b10) (not bool.b8))))) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (not (and (not (bvsle x3 (_ bv371 32))) (not (and (not bool.b12) (not bool.b5) (not bool.b14) (bvsle x3 (_ bv610 32)) (bvsle x3 (_ bv1200 32)) (not bool.b10) (not bool.b8) (bvsle x3 (_ bv30 32)))))))) (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv628 32)))) (not (and (not (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv628 32))) (not (and (not bool.b12) (not bool.b5) (not bool.b14) (not bool.b10) (not bool.b8))))))))) (not (and (not (bvsle x3 (_ bv15 32))) (not (and (not (and (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (not (and (not bool.b12) (not bool.b5) (not bool.b14) (not (bvsle x3 (_ bv371 32))) (bvsle x3 (_ bv610 32)) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (not bool.b10) (not bool.b8) (bvsle x3 (_ bv30 32)))))) (not (and (not (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32))) (not (and (not (and (not (bvsle x3 (_ bv371 32))) (not (and (not bool.b12) (not bool.b5) (not bool.b14) (bvsle x3 (_ bv610 32)) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (not bool.b10) (not bool.b8) (bvsle x3 (_ bv30 32)))))) (not (and (bvsle x3 (_ bv371 32)) (not (and (not bool.b12) (not bool.b5) (not bool.b14) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (not bool.b10) (not bool.b8))))))))))))))))))) bool.b7)) (not bool.b22) (not (and (not (and (not bool.b6) bool.b5)) (not bool.b7))))) (bvslt ?lambda (_ bv0 32)) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (not (and (not (and (not bool.b5) (not (and (not (bvsle (bvmul (_ bv4294967295 32) x3) (_ bv4294967266 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) x4) (bvmul (_ bv4294967236 32) ?lambdaprime)) (_ bv4294962796 32))))) bool.b7 (not bool.b6) (not bool.b22))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (not (and (not bool.b5) (not bool.b6) (not bool.b7) (not (and (not (bvsle (bvmul (_ bv4294967295 32) x3) (_ bv4294967266 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) x4) (bvmul (_ bv4294967236 32) ?lambdaprime)) (_ bv4294963196 32))))) (not bool.b22))) (not (and (not bool.b5) bool.b6 (not (and (not (bvsle (bvmul (_ bv4294967295 32) x3) (_ bv4294967266 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) x4) (bvmul (_ bv4294967236 32) ?lambdaprime)) (_ bv4294962386 32))))) (not bool.b7) (not bool.b22))))) (bvsle ?lambdaprime ?lambda)))))";
		final String expectedResultAsString = "(let ((.cse7 (bvsle x3 (_ bv0 32))) (.cse14 (bvsle x3 (_ bv371 32))) (.cse16 (bvsle x3 (_ bv15 32)))) (let ((.cse18 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (not (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda)))))) (.cse15 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (not (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32)))))) (.cse25 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (not (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (not (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32)))))) (.cse20 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (not (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (not (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32)))))) (.cse28 (forall ((?lambda (_ BitVec 32))) (let ((.cse37 (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (not (bvsle .cse37 (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (bvsle .cse37 (_ bv628 32)))))) (.cse17 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (not (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32)))))) (.cse3 (not .cse16)) (.cse9 (forall ((?lambda (_ BitVec 32))) (or (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (bvslt ?lambda (_ bv0 32)) (not (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (not (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32)))))) (.cse19 (forall ((?lambda (_ BitVec 32))) (or (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (bvslt ?lambda (_ bv0 32)) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (not (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32)))))) (.cse23 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (not (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32)))))) (.cse8 (not (bvsle x3 (_ bv40 32)))) (.cse24 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (not (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (not (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32)))))) (.cse1 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (not (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda)))))) (.cse34 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda)))))) (.cse21 (forall ((?lambda (_ BitVec 32))) (or (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (bvslt ?lambda (_ bv0 32)) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda)))))) (.cse26 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (not (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda)))))) (.cse0 (not .cse14)) (.cse11 (forall ((?lambda (_ BitVec 32))) (let ((.cse36 (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (not (bvsle .cse36 (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (bvsle .cse36 (_ bv628 32)))))) (.cse4 (bvsle x3 (_ bv723 32))) (.cse33 (forall ((?lambda (_ BitVec 32))) (or (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (bvslt ?lambda (_ bv0 32)) (not (bvsle (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)) (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda)))))) (.cse6 (not (bvsle x3 (_ bv1200 32)))) (.cse22 (not bool.b23)) (.cse13 (not .cse7)) (.cse29 (forall ((?lambda (_ BitVec 32))) (let ((.cse35 (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)))) (or (bvsle (bvadd x3 (bvmul (_ bv4294967290 32) ?lambda) (bvmul (_ bv4294967290 32) x5)) (_ bv658 32)) (bvslt ?lambda (_ bv0 32)) (not (bvsle .cse35 (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (bvsle .cse35 (_ bv628 32)))))) (.cse2 (not bool.b6)) (.cse10 (not (bvsle x3 (_ bv30 32)))) (.cse5 (not bool.b7)) (.cse12 (not (bvsle x3 (_ bv610 32))))) (and (or bool.b8 .cse0 .cse1 .cse2 bool.b10 .cse3 bool.b12 bool.b23 bool.b22 bool.b5 .cse4 .cse5 bool.b14 .cse6) (or bool.b8 .cse0 .cse2 .cse7 .cse8 bool.b10 bool.b12 bool.b22 bool.b5 .cse4 .cse9 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 .cse10 bool.b10 .cse11 bool.b12 bool.b22 .cse5 bool.b14 .cse12 bool.b5 .cse13) (or bool.b8 .cse2 .cse7 .cse8 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse14 .cse4 .cse15 .cse10 .cse16 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 .cse8 bool.b10 bool.b12 .cse17 bool.b22 .cse12 bool.b5 .cse4 .cse10 .cse16 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse14 .cse10 .cse5 bool.b14 .cse6 .cse18 .cse13) (or bool.b8 .cse2 .cse7 .cse8 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse4 .cse10 .cse16 .cse19 .cse5 bool.b14 .cse6) (or bool.b8 .cse0 .cse2 bool.b10 .cse3 bool.b12 bool.b22 bool.b5 .cse4 .cse5 bool.b14 .cse6 .cse18 .cse13) (or bool.b8 .cse0 .cse2 .cse8 bool.b10 bool.b12 bool.b22 bool.b5 .cse20 .cse4 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 bool.b10 .cse3 bool.b12 bool.b22 .cse12 bool.b5 .cse4 .cse10 .cse5 bool.b14 .cse6 .cse18 .cse13) (or bool.b8 .cse0 .cse2 bool.b10 .cse16 bool.b12 bool.b23 .cse21 bool.b22 .cse5 bool.b14 bool.b5) (or bool.b8 .cse1 .cse2 bool.b10 .cse3 bool.b12 bool.b23 bool.b22 .cse12 bool.b5 .cse4 .cse10 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 .cse7 .cse8 bool.b10 .cse22 bool.b12 bool.b22 bool.b5 .cse4 .cse15 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse14 .cse10 .cse16 .cse5 bool.b14 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))))) .cse13) (or bool.b8 .cse2 .cse8 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse14 .cse4 .cse23 .cse10 .cse16 .cse5 bool.b14 .cse6) (or bool.b8 .cse0 .cse2 .cse8 bool.b10 .cse3 bool.b12 bool.b22 bool.b5 .cse4 .cse24 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 .cse7 .cse8 .cse25 bool.b10 .cse3 bool.b12 bool.b22 .cse12 bool.b5 .cse4 .cse10 .cse5 bool.b14 .cse6) (or bool.b8 .cse0 .cse2 .cse7 .cse8 .cse25 bool.b10 .cse3 bool.b12 bool.b22 bool.b5 .cse4 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 .cse8 bool.b10 .cse3 bool.b12 bool.b22 .cse12 bool.b5 .cse4 .cse10 .cse24 .cse5 bool.b14 .cse6) (or bool.b8 .cse0 .cse26 .cse2 bool.b10 bool.b12 bool.b22 bool.b5 .cse4 .cse5 bool.b14 .cse6 .cse13) (or bool.b8 .cse2 bool.b10 .cse3 bool.b23 bool.b12 bool.b22 .cse5 bool.b14 (forall ((?lambda (_ BitVec 32))) (let ((.cse27 (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)))) (or (bvslt ?lambda (_ bv0 32)) (not (bvsle .cse27 (_ bv1105 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (bvsle .cse27 (_ bv628 32))))) bool.b5) (or bool.b8 .cse2 .cse7 .cse8 .cse25 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse14 .cse4 .cse10 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 bool.b10 .cse3 bool.b12 bool.b22 .cse5 bool.b14 .cse28 bool.b5 .cse13) (or bool.b8 .cse2 bool.b10 bool.b12 bool.b23 bool.b22 .cse12 bool.b5 .cse14 .cse10 .cse16 .cse5 bool.b14 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda)))))) (or bool.b8 .cse29 .cse0 .cse2 bool.b10 bool.b12 bool.b23 bool.b22 .cse5 bool.b14 bool.b5) (or bool.b8 .cse2 .cse8 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse20 .cse4 .cse10 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse14 .cse10 .cse5 bool.b14 .cse28 .cse13) (or bool.b8 .cse2 .cse7 .cse8 bool.b10 .cse3 bool.b12 bool.b22 bool.b5 .cse4 (forall ((?lambda (_ BitVec 32))) (let ((.cse30 (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)))) (or (bvslt ?lambda (_ bv0 32)) (not (bvsle .cse30 (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (not (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32))) (bvsle .cse30 (_ bv628 32))))) .cse5 bool.b14 .cse6) (or bool.b8 .cse2 bool.b10 (forall ((?lambda (_ BitVec 32))) (let ((.cse31 (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)))) (or (bvslt ?lambda (_ bv0 32)) (not (bvsle .cse31 (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (bvsle .cse31 (_ bv628 32))))) bool.b12 bool.b23 bool.b22 .cse12 bool.b5 .cse14 .cse10 .cse5 bool.b14) (or bool.b8 .cse0 .cse2 .cse8 bool.b10 bool.b12 .cse17 bool.b22 bool.b5 .cse4 .cse16 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 .cse8 bool.b10 .cse3 bool.b12 bool.b22 bool.b5 .cse4 (forall ((?lambda (_ BitVec 32))) (let ((.cse32 (bvadd x3 (bvmul (_ bv4294967287 32) ?lambda) (bvmul (_ bv4294967287 32) x5)))) (or (bvslt ?lambda (_ bv0 32)) (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (not (bvsle .cse32 (_ bv1105 32))) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))) (not (bvsle (bvadd x3 (bvmul (_ bv3 32) ?lambda) (bvmul (_ bv3 32) x5)) (_ bv50 32))) (bvsle .cse32 (_ bv628 32))))) .cse5 bool.b14 .cse6) (or bool.b8 .cse2 .cse7 .cse8 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse4 .cse9 .cse10 .cse5 bool.b14 .cse6) (or bool.b8 .cse0 .cse2 bool.b10 bool.b12 bool.b23 bool.b22 bool.b5 .cse4 .cse33 .cse5 bool.b14 .cse6) (or bool.b8 .cse0 .cse2 .cse7 .cse8 bool.b10 bool.b12 bool.b22 bool.b5 .cse4 .cse16 .cse19 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 .cse8 bool.b10 .cse22 bool.b12 bool.b22 bool.b5 .cse4 .cse23 .cse5 bool.b14 .cse6) (or bool.b8 .cse2 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse10 .cse16 .cse34 .cse5 bool.b14 .cse13) (or bool.b8 .cse2 .cse8 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse14 .cse4 .cse10 .cse24 .cse5 bool.b14 .cse6) (or bool.b8 .cse1 .cse2 bool.b10 bool.b12 bool.b23 bool.b22 .cse12 bool.b5 .cse14 .cse10 .cse5 bool.b14 .cse6) (or bool.b8 .cse0 .cse2 bool.b10 .cse16 bool.b12 bool.b22 .cse34 .cse5 bool.b14 bool.b5 .cse13) (or bool.b8 .cse2 bool.b10 bool.b12 bool.b23 bool.b22 .cse12 bool.b5 .cse10 .cse16 .cse21 .cse5 bool.b14) (or bool.b8 .cse26 .cse2 bool.b10 bool.b12 bool.b22 .cse12 bool.b5 .cse4 .cse10 .cse5 bool.b14 .cse6 .cse13) (or bool.b8 .cse0 .cse2 bool.b10 .cse11 bool.b12 bool.b22 .cse5 bool.b14 bool.b5 .cse13) (or (not bool.b5) bool.b6 bool.b7 (forall ((?lambda (_ BitVec 32))) (or (bvslt ?lambda (_ bv0 32)) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))))) bool.b22) (or bool.b8 .cse2 bool.b10 bool.b12 bool.b23 bool.b22 .cse12 bool.b5 .cse4 .cse33 .cse10 .cse5 bool.b14 .cse6) (or .cse2 .cse22 bool.b22 .cse5 bool.b5 (forall ((?lambda (_ BitVec 32))) (or (bvsle (bvadd x4 (bvmul (_ bv60 32) ?lambda)) (_ bv4820 32)) (bvslt ?lambda (_ bv0 32)) (not (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambda) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32))) (exists ((?lambdaprime (_ BitVec 32))) (and (bvsle (_ bv0 32) ?lambdaprime) (bvsle (bvadd (bvmul (_ bv4294967295 32) ?lambdaprime) (bvmul (_ bv4294967295 32) x5)) (_ bv4294967286 32)) (bvsle ?lambdaprime ?lambda))))) .cse13) (or bool.b8 .cse29 .cse2 .cse10 bool.b10 bool.b12 bool.b23 bool.b22 .cse5 bool.b14 .cse12 bool.b5))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}


	@Test
	public void NIA_psyco_060() {
		final Sort bool = SmtSortUtils.getBoolSort(mScript);
		mScript.declareFun("W_S1_V6", new Sort[0], bool);
		mScript.declareFun("W_S1_V2", new Sort[0], bool);
		mScript.declareFun("W_S1_V3", new Sort[0], bool);
		mScript.declareFun("W_S1_V1", new Sort[0], bool);
		mScript.declareFun("R_S1_V3", new Sort[0], bool);
		mScript.declareFun("R_S1_V1", new Sort[0], bool);
		mScript.declareFun("R_S1_V6", new Sort[0], bool);
		mScript.declareFun("R_S1_V5", new Sort[0], bool);
		mScript.declareFun("R_S1_V2", new Sort[0], bool);
		mScript.declareFun("DISJ_W_S1_R_S1", new Sort[0], bool);
		mScript.declareFun("W_S1_V5", new Sort[0], bool);
		final String formulaAsString = "(and (forall ((V2_0 Int) (V5_0 Int) (V6_0 Int) (MW_S1_V1 Bool) (MW_S1_V3 Bool) (MW_S1_V2 Bool) (MW_S1_V5 Bool) (MW_S1_V6 Bool) (S1_V3_!1741 Int) (S1_V3_!1746 Int) (S1_V1_!1740 Int) (S1_V1_!1745 Int) (S1_V2_!1742 Int) (S1_V2_!1747 Int) (S1_V5_!1743 Int) (S1_V5_!1748 Int) (S1_V6_!1744 Int) (S1_V6_!1749 Int)) (or (not (and (>= 1 (* (ite MW_S1_V2 S1_V2_!1747 V2_0) (ite MW_S1_V2 S1_V2_!1747 V2_0))) (<= (ite MW_S1_V2 S1_V2_!1742 V2_0) (+ (ite MW_S1_V3 S1_V3_!1741 0) 1)) (not (<= (* V2_0 V2_0) 0)) (<= (ite MW_S1_V2 S1_V2_!1742 V2_0) (+ (ite MW_S1_V1 S1_V1_!1740 0) 1)) (not (<= V2_0 0)))) (not (and (or (= S1_V3_!1746 S1_V3_!1741) (not (and (or (= (* (div 0 V2_0) V2_0) 0) (not R_S1_V3)) (or (= 0 (div 0 V2_0)) (not R_S1_V1))))) (or (not (and (or (= (* (div 0 V2_0) V2_0) 0) (not R_S1_V3)) (or (= 0 (div 0 V2_0)) (not R_S1_V1)))) (= S1_V5_!1748 S1_V5_!1743)) (or (not (and (or (= (* (div 0 V2_0) V2_0) 0) (not R_S1_V3)) (or (= 0 (div 0 V2_0)) (not R_S1_V1)))) (= S1_V6_!1749 S1_V6_!1744)) (or (not (and (or (= (* (div 0 V2_0) V2_0) 0) (not R_S1_V3)) (or (= 0 (div 0 V2_0)) (not R_S1_V1)))) (= S1_V1_!1745 S1_V1_!1740)) (or W_S1_V3 (not MW_S1_V3)) (or W_S1_V6 (not MW_S1_V6)) (or (not MW_S1_V2) W_S1_V2) (or W_S1_V1 (not MW_S1_V1)) (or (= S1_V2_!1747 S1_V2_!1742) (not (and (or (= (* (div 0 V2_0) V2_0) 0) (not R_S1_V3)) (or (= 0 (div 0 V2_0)) (not R_S1_V1))))))) (and (= (ite MW_S1_V2 S1_V2_!1747 V2_0) (ite MW_S1_V2 S1_V2_!1742 V2_0)) (= (ite MW_S1_V5 S1_V5_!1743 V5_0) (ite MW_S1_V5 S1_V5_!1748 V5_0)) (= (ite MW_S1_V6 S1_V6_!1749 V6_0) (ite MW_S1_V6 S1_V6_!1744 V6_0)) (= (+ (ite MW_S1_V2 S1_V2_!1747 V2_0) (- 1)) (ite MW_S1_V3 S1_V3_!1741 0)) (= (ite MW_S1_V1 S1_V1_!1740 0) (+ (ite MW_S1_V2 S1_V2_!1747 V2_0) (- 1)))))) W_S1_V5 (= DISJ_W_S1_R_S1 (not (or (and W_S1_V1 R_S1_V1) R_S1_V5 (and W_S1_V3 R_S1_V3) (and R_S1_V6 W_S1_V6) (and R_S1_V2 W_S1_V2)))))";
		final String expectedResultAsString = "(let ((.cse4 (not W_S1_V2)) (.cse2 (not W_S1_V1))) (let ((.cse9 (or .cse4 .cse2))) (let ((.cse8 (and .cse4 .cse9 .cse2)) (.cse0 (not W_S1_V3))) (let ((.cse1 (or .cse0 .cse4 .cse2)) (.cse5 (or .cse0 .cse8)) (.cse3 (not W_S1_V6)) (.cse6 (or .cse0 .cse4)) (.cse7 (or .cse0 .cse2))) (and .cse0 .cse1 (or (and (or (and W_S1_V1 R_S1_V1) R_S1_V5 (and W_S1_V3 R_S1_V3) (and R_S1_V6 W_S1_V6) (and R_S1_V2 W_S1_V2)) (not DISJ_W_S1_R_S1)) (and DISJ_W_S1_R_S1 (or (not R_S1_V1) .cse2) (not R_S1_V5) (or .cse3 (not R_S1_V6)) (or .cse4 (not R_S1_V2)) (or .cse0 (not R_S1_V3)))) .cse4 (or (and .cse0 .cse1 .cse5 .cse6 .cse7) .cse3) .cse5 W_S1_V5 (or .cse8 .cse3) .cse6 .cse9 .cse7 .cse2)))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}



	/**
	 * 20190812 Matthias: In the competition we were able to solve this benchmark
	 * but now we obtain an AEA term.
	 */
//	@Test
	public void ALIA_piVC_piVC_d91441() {
		final Sort smtInt = SmtSortUtils.getIntSort(mScript);
		final Sort array = SmtSortUtils.getArraySort(mScript, smtInt, smtInt);
		mScript.declareFun("V_6", new Sort[0], smtInt);
		mScript.declareFun("V_5", new Sort[0], smtInt);
		mScript.declareFun("t", new Sort[0], smtInt);
		mScript.declareFun("ix", new Sort[0], smtInt);
		mScript.declareFun("j", new Sort[0], smtInt);
		mScript.declareFun("i", new Sort[0], smtInt);
		mScript.declareFun("a", new Sort[0], array);
		final String formulaAsString = "(and (<= 0 j) (= V_5 V_6) (forall ((?V_11 Int)) (=> (and (<= (+ ?V_11 1) i) (<= 0 ?V_11)) (forall ((?V_12 Int)) (=> (and (<= 0 ?V_12) (<= ?V_12 ?V_11)) (<= (select a ?V_12) (select a ?V_11)))))) (< t (select a j)) (<= 0 V_5) (<= 0 (+ j 1)) (<= (+ j 1) i) (or (<= V_6 i) (exists ((?V_8 Int)) (and (exists ((?V_9 Int)) (and (<= ?V_9 ?V_8) (<= 0 ?V_9) (< (select (store a (+ j 1) (select a j)) ?V_8) (select (store a (+ j 1) (select a j)) ?V_9)))) (<= (+ ?V_8 1) i) (<= 0 ?V_8))) (not (= V_5 V_6)) (and (< (select (store a (+ j 1) (select a j)) i) (select (store a (+ j 1) (select a j)) (+ i (- 1)))) (not (= (+ i (- 1)) (+ j (- 1))))) (< i 1) (< j 0) (< i j) (and (exists ((?V_7 Int)) (and (<= ?V_7 i) (<= j ?V_7) (<= (select (store a (+ j 1) (select a j)) ?V_7) t))) (not (= (+ i (- 1)) (+ j (- 1)))))) (<= 1 i) (< i V_6) (or (= (+ i (- 1)) j) (<= (select a (+ i (- 1))) (select a i))) (or (= (+ i (- 1)) j) (forall ((?V_10 Int)) (=> (and (<= ?V_10 i) (<= (+ j 1) ?V_10)) (< t (select a ?V_10))))))";
		final String expectedResultAsString = "(let ((.cse20 (+ i (- 1))) (.cse22 (+ j 1)) (.cse23 (select a j))) (let ((.cse9 (< i j)) (.cse14 (<= V_6 i)) (.cse19 (exists ((?V_7 Int)) (and (<= ?V_7 i) (<= j ?V_7) (<= (select (store a (+ j 1) (select a j)) ?V_7) t)))) (.cse17 (< j 0)) (.cse16 (let ((.cse24 (store a .cse22 .cse23))) (< (select .cse24 i) (select .cse24 .cse20)))) (.cse15 (not (= .cse20 (+ j (- 1))))) (.cse8 (= .cse20 j)) (.cse12 (< i 1)) (.cse0 (<= 0 j)) (.cse11 (forall ((?V_10 Int)) (or (not (<= ?V_10 i)) (< t (select a ?V_10)) (not (<= (+ j 1) ?V_10))))) (.cse1 (= V_5 V_6)) (.cse2 (< t .cse23)) (.cse3 (forall ((?V_11 Int) (?V_12 Int)) (or (not (<= 0 ?V_11)) (not (<= 0 ?V_12)) (not (<= ?V_12 ?V_11)) (<= (select a ?V_12) (select a ?V_11)) (not (<= (+ ?V_11 1) i))))) (.cse4 (<= 0 .cse22)) (.cse5 (<= .cse22 i)) (.cse6 (<= 0 V_5)) (.cse7 (<= 1 i)) (.cse18 (exists ((?V_9 Int) (?V_8 Int)) (and (<= ?V_9 ?V_8) (<= (+ ?V_8 1) i) (<= 0 ?V_8) (<= 0 ?V_9) (let ((.cse21 (store a (+ j 1) (select a j)))) (< (select .cse21 ?V_8) (select .cse21 ?V_9)))))) (.cse13 (<= (select a .cse20) (select a i))) (.cse10 (< i V_6))) (or (and .cse0 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse9 .cse10) (and .cse0 .cse1 .cse11 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse12 .cse13 .cse10) (and .cse0 .cse1 .cse11 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse9 .cse13 .cse10) (and .cse0 .cse14 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse10) (and .cse11 .cse3 .cse4 .cse5 .cse15 .cse0 .cse1 .cse16 .cse2 .cse6 .cse7 .cse13 .cse10) (and .cse0 .cse14 .cse1 .cse11 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse13 .cse10) (and .cse0 .cse1 .cse11 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse17 .cse13 .cse10) (and .cse0 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse18 .cse8 .cse10) (and .cse11 .cse19 .cse3 .cse4 .cse5 .cse15 .cse0 .cse1 .cse2 .cse6 .cse7 .cse13 .cse10) (and .cse0 .cse1 .cse19 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse15 .cse10) (and .cse0 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse17 .cse10) (and .cse0 .cse1 .cse16 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse15 .cse10) (and .cse0 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse8 .cse12 .cse10) (and .cse0 .cse11 .cse1 .cse2 .cse3 .cse4 .cse5 .cse6 .cse7 .cse18 .cse13 .cse10))))";
		QuantifierEliminationTest.runQuantifierEliminationTest(formulaAsString, expectedResultAsString, true, mServices, mLogger, mMgdScript, mCsvWriter);
	}


}
